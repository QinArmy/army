
1. 放弃 LongExpression ,IntegerExpresion ,NumberExpresioin 的原因
(1)Java 没有对整形作抽象(Integer,Long,BigInteger 没有共同的抽象类或接口),这使得Army的接口和实现太复杂.
(2)数据库本身能够对 非整形的数据进行按位操作,支持对非数据类型进行加减.

2. 为什么 io.army.criteria.Select.SelectSQLAble 没有 直接转换为子查询的方法,
因为这样容易让开发者偷懒把外层查询转变为子查询,这样会造成一旦相应的普通查询修改就会造成对应的子查询出bug。

3. 为什么 把 SelectSQLAble 设计为不同体系
(1) 让各数据库的特点尽可能的发挥,在现实开发中更换数据库的情况并不多见.
(2) 让子四种子查询(scale,column,row,table)的API更简洁而直接.
(3) 在实现的复杂和使用的简洁性的平衡下，选择多体系方案.
(4) 子查询和外层查询的语法不同,比如 锁语法.


4. 为什么设计 SQLS.ref(String,String) ?
(1) 为了在外层查询的 select 子句中 引用 SubQuery 的 Selection .
(2) 避免重复创建 RefSelection.

5. 为什么设计  SelectionGroup ?
(1) 可以减少不必要的 RefSelection 对象的创建,提高运行效率.
(2) 可以减少不必要的 AliasField 对象的创建,提高运行效率.
(3) 简化 select 子句的 api,如 : select t1.*,t2.*,subQueryAlias.* from t1 join t2 on xxx join () as subQueryAlias .
(4) 当 TableMeta 在 Select SQL 的 from 子句 和 join 子句 总共只出现一次时,
可以将 TableMeta 的 FieldMeta 封装成一个 SelectionGroup,且生成的 sql 中 对应的FieldMeta 有表别名.

6. 为什么不在 Select 的内部接口中 加上 List<SQLModifier> modifierList 或  <M extends SQLModifier> List<S> modifierList
参数的方法?
(1) 在数据库变更时 这样的 api 不容易发现 bug, 也正因为如此 MySQL 的专用 api 参数才使用 枚举 MySQLModifier
 而不是使用 接口 SQLModifier .

7. 为什么把 标准 API 各个数据库的专用 API 写在不同的模块?
(1) 因为在变更数据库是只要把相应的 maven 模块移出,就在找到需要修改的地方.

8. 为什么不支持 postgre select 中的 only 关键字？
(1)因为 postgre 的继承与 army 的继承不是一个概念,如果支持可能会查出没有 domain 的表。

9. 在 select 语句中为什么要设计没有 join 的 api ?
(1)因为有的 "表" from 后不能 join ,如: DUAL .

10. 为什么 PostgreAliasFuncTable 没有继承 PostgreFuncTable?
(1) 因为在 ROWS FROM 子句中 函数 导出的表定义是不能有别名的,如果继承则将会造成语法错误.

11. 为什么 postgre 的 select 语句在 使用 group by 和 window 后仍然能调用  lock 方法?
(1) 因为 在 java 中 Postgres 要继承 SQLS , PostgreSelectPartAble 要继承 SelectPartAble , 造成返回类型不兼容.

12. 为什么 IPredicate 不支持 and 操作符?
(1) 因为 IPredicate 是自我描述的,如果支持 and ,生成的 SQL 会有很多不必要的 () ,这样的 SQL 很难看.

13. START TRANSACTION 语法可以减少网络操作,为什么 没有使用 START TRANSACTION 来控制事务?
(1) 因为 MySQL 的 START TRANSACTION 文档中有一句话让我觉得很可怕
,"Beginning a transaction causes any pending transaction to be committed.".这个语法设计可以说是史上最糟糕的设计，
甚至可以说是愚蠢的，因为一旦开发者在没有提交的情况下开始一个新的事务，这个结果可能是开发者无法承受，安全意识高的开发者是不会选择这个语句的。

14. 为什么要设计  io.army.boot.sync.LocalSessionFactoryBean ?
(1) 相要利用 org.springframework.beans.factory.DisposableBean .
(2) 充分利用 spring 容器特性,简化配置.

15. 为什么 DomainBatchSQLWrapper 的 domainWrapperList 类型是 BeanWrapper 而不是 DomainWrapper ,因为批量操作
使用底层的 java.sql.PreparedStatement.addBatch 实现,所以只能是对于同一表的批量操作.

16. 为什么删除对 PostFieldGenerator 的支持?
(1)因为 army 天生支持分片,PostFieldGenerator 创建的 id 不能分片.
(2)PostFieldGenerator 删除后,army 设计简洁很多.

17. 为什么 FieldMeta , ComposeRefSelection 和 RefSelection 的 as() 方法每次都要返回新的实例?
(1) 因为 FieldMeta ,ComposeRefSelection 和 RefSelection 都是对字段的引用,在它的上下文中逻辑上必须是唯一的,否则阄产生 bug.

18. 为什么 可 分片中 SubInsert 的 target table 必须指定表 索引,不允许由子查询推导?
(1)因为子查询是可以 join 的,如果由子查询推导则会造成 分片算法的不确定性和复杂化。

19. 为什么 batch dml 不支持 sharding ?
(1)因为 batch 使用相同的sql模板,以节省网络操作,如果再支持 table route 则会产生不同的 sql 模板,那么批量就没有意义了.

20. returning insert 为什么只支持单表?
(1) 多表的 insert 在实践中意义不大.
(2) 若支持多表 整个 criteria 设计 则更复杂.

21. 为什么 Dialect 的方法都不声明异常？
(1) 因为 Dialect 的方法都不直接面向开发者,只有 Session,Transaction,SessionFactory 直接面向开发者
,所以只能在 这三者的这一层抽象处理异常就好。
(2) 可以省去不必要的 try catch

22. 为什么 io.army.util.PairBean 和 io.army.util.TripleBean 接口 不设计 任何方法?
(1) 防止 开发者将 io.army.util.PairBean 和 io.army.util.TripleBean 接口 作为 dao 和 service 的返回值
,这样会破坏开发者项目的整体结构设计.

23. 为什么 MySQLDateType 不支持 LONGBLOB ,LONGTEXT ?
(1)因为太大了(2的32次方 -1,有4 个G),这种级别的存储不应该使用传统数据库.
(3) 对于整个设计来说 io.army.annotation.Column.precision() 返回 int 类型才是最合适的.

24. 为什么 io.army.meta.mapping.LocalDateTimeType.nonNullSet 不用 setString ?
(1) 因为要考虑各数据库的 时间精度问题.

25. 为什么要坚持 为 Select,SubQuery,RowSubQuery,ColumnSubQuery,ScalarSubQuery 分别写一套 api 接口?
(1) Army 的语法表达的  api(如:Select,Update,SubQuery) 等的设计原则是 sql style,易读性,书写的引导性.
(2)在(1)的前提下, select 的 union 操作只能接收 select,不能接收 SubQuery.
(3)在(1)的前提下, SubQuery 的 union 操作只能接口 SubQuery.
(4) RowSubQuery,ColumnSubQuery,ScalarSubQuery 都在特定的上下文中有有特殊的意义,如: ScalarSubQuery 本身继承了 Expression 接口,
ColumnSubQuery 可以使用 in,any ,some,all 等关键字.

26. 为什么要坚持 为 不同的数据库 sql 语法写不同的版本,如:MySQL57Select?
(1)基于 第 25 号问题的设计, sql 表达 api(如:Select,Update,SubQuery) 有时候不易扩展.
(2)数据库 sql api 本身不同版本要要求不同,如:MySQ 5.7 没有 window 子句,有 procedure，lock 子句也没有 of table 子句,但 MySQL 8.0
有 window 子句,删除 procedure 子句,lock 子句 增加 of table 子句. 然而基于 25 号问题的设计,不能在原有 api 上进行扩展.
(3) 首先这样的设计作者作为广大开发者之一并不反感,其次 对于不同的数据库有不同的 专用 api 这个设计我相信大多数开发也理解和接受.
(4) 这个设计缺点在于 随着数据库的版本的增加相应的 api 版本也增加,但这也是不一定的,因为有时候数据库版本增加了但 sql api 并没有什么变化,
退一步讲,就算 army 的 sql表达 api 的版本变多了,我认为这也不是核心的问题,在理解和接受的范围内.而且 数据库想要增加一个较大的版本并被广大开发者所
采用不是一件短时间的事,几个月/一年 恐怕是完不成的,但 对于 army 来说增加一个版本的 sql 表达 api 只需要几天的开发和最多长达几周的测试.

